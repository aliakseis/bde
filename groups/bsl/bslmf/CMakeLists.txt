#-------------------------------------------------------------------
# This file was automatically generated by ProjectGenerator
# which is tooling part the build system designed for GUCEF
#     (Galaxy Unlimited Framework)
# For the latest info, see http://www.VanvelzenSoftware.com/
#
# The contents of this file are placed in the public domain. Feel
# free to make use of it in any way you like.
#-------------------------------------------------------------------
#

# Configuration for module: bslmf

set( HEADER_FILES 
  bslmf_addconst.h
  bslmf_addcv.h
  bslmf_addlvaluereference.h
  bslmf_addpointer.h
  bslmf_addreference.h
  bslmf_addrvaluereference.h
  bslmf_addvolatile.h
  bslmf_allocatorargt.h
  bslmf_arraytopointer.h
  bslmf_assert.h
  bslmf_conditional.h
  bslmf_decay.h
  bslmf_detectnestedtrait.h
  bslmf_enableif.h
  bslmf_forwardingtype.h
  bslmf_functionpointertraits.h
  bslmf_haspointersemantics.h
  bslmf_if.h
  bslmf_integralconstant.h
  bslmf_isarithmetic.h
  bslmf_isarray.h
  bslmf_isbitwiseequalitycomparable.h
  bslmf_isbitwisemoveable.h
  bslmf_isclass.h
  bslmf_isconst.h
  bslmf_isconvertible.h
  bslmf_isconvertibletoany.h
  bslmf_iscopyconstructible.h
  bslmf_isempty.h
  bslmf_isenum.h
  bslmf_isfloatingpoint.h
  bslmf_isfunction.h
  bslmf_isfundamental.h
  bslmf_isintegral.h
  bslmf_islvaluereference.h
  bslmf_ismemberfunctionpointer.h
  bslmf_ismemberobjectpointer.h
  bslmf_ismemberpointer.h
  bslmf_isnothrowmoveconstructible.h
  bslmf_ispair.h
  bslmf_ispointer.h
  bslmf_ispointertomember.h
  bslmf_ispolymorphic.h
  bslmf_isreference.h
  bslmf_isrvaluereference.h
  bslmf_issame.h
  bslmf_istriviallycopyable.h
  bslmf_istriviallydefaultconstructible.h
  bslmf_isvoid.h
  bslmf_isvolatile.h
  bslmf_matchanytype.h
  bslmf_matcharithmetictype.h
  bslmf_memberfunctionpointertraits.h
  bslmf_metaint.h
  bslmf_movableref.h
  bslmf_nestedtraitdeclaration.h
  bslmf_nil.h
  bslmf_nthparameter.h
  bslmf_removeconst.h
  bslmf_removecv.h
  bslmf_removecvq.h
  bslmf_removeextent.h
  bslmf_removepointer.h
  bslmf_removereference.h
  bslmf_removevolatile.h
  bslmf_resulttype.h
  bslmf_selecttrait.h
  bslmf_switch.h
  bslmf_tag.h
  bslmf_typelist.h
  bslmf_usesallocator.h
  bslmf_usesallocatorargt.h
  bslmf_util.h
  bslmf_voidtype.h
)

set( SOURCE_FILES 
  bslmf_addconst.cpp
  bslmf_addcv.cpp
  bslmf_addlvaluereference.cpp
  bslmf_addpointer.cpp
  bslmf_addreference.cpp
  bslmf_addrvaluereference.cpp
  bslmf_addvolatile.cpp
  bslmf_allocatorargt.cpp
  bslmf_arraytopointer.cpp
  bslmf_assert.cpp
  bslmf_conditional.cpp
  bslmf_decay.cpp
  bslmf_detectnestedtrait.cpp
  bslmf_enableif.cpp
  bslmf_forwardingtype.cpp
  bslmf_functionpointertraits.cpp
  bslmf_haspointersemantics.cpp
  bslmf_if.cpp
  bslmf_integralconstant.cpp
  bslmf_isarithmetic.cpp
  bslmf_isarray.cpp
  bslmf_isbitwiseequalitycomparable.cpp
  bslmf_isbitwisemoveable.cpp
  bslmf_isclass.cpp
  bslmf_isconst.cpp
  bslmf_isconvertible.cpp
  bslmf_isconvertibletoany.cpp
  bslmf_iscopyconstructible.cpp
  bslmf_isempty.cpp
  bslmf_isenum.cpp
  bslmf_isfloatingpoint.cpp
  bslmf_isfunction.cpp
  bslmf_isfundamental.cpp
  bslmf_isintegral.cpp
  bslmf_islvaluereference.cpp
  bslmf_ismemberfunctionpointer.cpp
  bslmf_ismemberobjectpointer.cpp
  bslmf_ismemberpointer.cpp
  bslmf_isnothrowmoveconstructible.cpp
  bslmf_ispair.cpp
  bslmf_ispointer.cpp
  bslmf_ispointertomember.cpp
  bslmf_ispolymorphic.cpp
  bslmf_isreference.cpp
  bslmf_isrvaluereference.cpp
  bslmf_issame.cpp
  bslmf_istriviallycopyable.cpp
  bslmf_istriviallydefaultconstructible.cpp
  bslmf_isvoid.cpp
  bslmf_isvolatile.cpp
  bslmf_matchanytype.cpp
  bslmf_matcharithmetictype.cpp
  bslmf_memberfunctionpointertraits.cpp
  bslmf_metaint.cpp
  bslmf_movableref.cpp
  bslmf_nestedtraitdeclaration.cpp
  bslmf_nil.cpp
  bslmf_nthparameter.cpp
  bslmf_removeconst.cpp
  bslmf_removecv.cpp
  bslmf_removecvq.cpp
  bslmf_removeextent.cpp
  bslmf_removepointer.cpp
  bslmf_removereference.cpp
  bslmf_removevolatile.cpp
  bslmf_resulttype.cpp
  bslmf_selecttrait.cpp
  bslmf_switch.cpp
  bslmf_tag.cpp
  bslmf_typelist.cpp
  bslmf_usesallocator.cpp
  bslmf_usesallocatorargt.cpp
  bslmf_util.cpp
  bslmf_voidtype.cpp
)

# Make sure the PLATFORM_HEADER_FILES variable is always defined
 set( PLATFORM_HEADER_FILES "" )

# Make sure the PLATFORM_SOURCE_FILES variable is always defined
 set( PLATFORM_SOURCE_FILES "" )

# For ease of use make a variable that has all files for this module
set( ALL_FILES ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES} )

set( MODULE_NAME "bslmf" )
add_library( ${MODULE_NAME} STATIC ${ALL_FILES} )
add_dependencies( ${MODULE_NAME} bsls bslscm )

include_directories( ../../bsl ../../bsl/bsl+bslhdrs ../../bsl/bsl+stdhdrs ../../bsl/bslalg ../../bsl/bsldoc ../../bsl/bslh ../../bsl/bslim ../../bsl/bslma ../../bsl/bslmf ../../bsl/bslmt ../../bsl/bsls ../../bsl/bslscm ../../bsl/bslstl ../../bsl/bsltf ../../bsl/bslx ../bsls ../bslscm . )
